# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation **following the Skateboard-First Philosophy.**

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file.
2.  **Analyze PRD:** The AI reads the PRD, paying close attention to the phased requirements (**Skateboard, Scooter, etc.**).
3.  **Phase 1: Generate Parent Tasks:**
    - Based on the PRD analysis, create the main parent tasks.
    - **IMPORTANT: The Skateboard PHASE may require multiple parent tasks to complete.**
    - **Parent Task Sizing Rule:** Each parent task should have 5-6 sub-tasks maximum. If you find yourself with more, split it into multiple parent tasks.
    - For example, a "Skateboard: Basic Favorites" might need:
      - Task 1.0: User Authentication (5 sub-tasks)
      - Task 2.0: Connect Users to Images (6 sub-tasks)
      - Task 3.0: Favorites Data Model (5 sub-tasks)
      - Task 4.0: Build Favorites UI (5 sub-tasks)
      - Task 5.0: Create Favorites Page (5 sub-tasks)
    - **Parent Task Coherence (The Complete Slice Test):** Each parent task must deliver a complete, shippable slice (a vertical slice). It is not a component (a horizontal slice). A parent task is never just "Create the UI" or "Build the API endpoint". It must work end-to-end.
    - **Parent Task Checklist (before presenting to user):**
      - [ ] Can a user actually USE this when complete?
      - [ ] Does it work end-to-end (UI → Backend → Database)?
      - [ ] Could you demo this to someone?
      - [ ] Is it independently valuable (even if part of a larger phase)?
      - [ ] Does it have 5-6 sub-tasks or fewer?
      - If any answer is "no", reconsider the task breakdown.
    - Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level parent tasks. The first [X] tasks form the Skateboard phase. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down **all parent tasks in the Skateboard phase** into their smaller, actionable sub-tasks.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List views first, then controllers, then models/services.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the specified filename.

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `[view/template files]` - Brief description (e.g., UI templates for the feature).
- `[controller/handler files]` - Brief description (e.g., Request handling logic).
- `[model/service files]` - Brief description (e.g., Business logic and data models).
- `[test files]` - Brief description (e.g., Unit and integration tests).
- `[configuration files]` - Brief description (e.g., Settings and dependencies).

### Notes

- **This plan follows the Skateboard-First Philosophy.**
- The Skateboard-to-Car analogy defines PHASES, not individual tasks.
- Each PHASE may require multiple parent tasks to complete.
- **Parent Task Sizing:** Keep each parent task to 5-6 sub-tasks maximum.
- Each parent task is a **Complete Vertical Slice** that works end-to-end.
- **Anti-patterns to avoid:**
  - A parent task that only builds one layer (just UI or just backend)
  - A parent task with 20+ sub-tasks (split it into multiple focused tasks)
- Sub-tasks are the small, sequential steps to build each parent task.
- Prefer simple solutions (meta refresh) before complex ones (Turbo Streams).

## Tasks

### Skateboard Phase
- [ ] 1.0 Parent Task Title (e.g., Add User Authentication)
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
  - [ ] 1.3 [Sub-task description 1.3]
  - [ ] 1.4 [Sub-task description 1.4]
  - [ ] 1.5 [Sub-task description 1.5]
- [ ] 2.0 Parent Task Title (e.g., Create Data Model)
  - [ ] 2.1 [Sub-task description 2.1]
  - [ ] 2.2 [Sub-task description 2.2]
  - [ ] 2.3 [Sub-task description 2.3]
  - [ ] 2.4 [Sub-task description 2.4]
  - [ ] 2.5 [Sub-task description 2.5]
- [ ] 3.0 Parent Task Title (e.g., Build User Interface)
  - [ ] 3.1 [Sub-task description 3.1]
  - [ ] 3.2 [Sub-task description 3.2]
  - [ ] 3.3 [Sub-task description 3.3]
  - [ ] 3.4 [Sub-task description 3.4]

### Scooter Phase  
- [ ] 4.0 Parent Task Title (e.g., Add Advanced Features)
  - [ ] 4.1 [Sub-task description 4.1]
  - [ ] 4.2 [Sub-task description 4.2]
  - [ ] 4.3 [Sub-task description 4.3]

## Task Sizing Best Practices

### Signs a Parent Task is Too Large
- More than 6-8 sub-tasks
- Sub-tasks span multiple unrelated areas
- Would take more than a day to complete
- Mixes different concerns (e.g., auth + data model + UI in one task)

### How to Split Large Tasks
If you have a task like "Implement Favorites System" with 20 sub-tasks, split it:
- Task 1: Set up data relationships
- Task 2: Create the data model
- Task 3: Build the API/controller
- Task 4: Create the UI components
- Task 5: Build the favorites page

Each smaller task is still complete and valuable, but more manageable.

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
