---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Order tasks UI-first:
    - Start with user-visible changes (views, UI components)
    - Then controller/routing changes
    - Then business logic/models
    - Finally infrastructure (only if proven necessary)
    
    **Parent Task Coherence (Vertical Slice Strategy):** Each parent task must:
    - Leave the application in a working, coherent state when completed
    - Not create UI that pretends to have backend functionality that doesn't exist
    - Group tightly coupled changes together across all layers (UI + Controller + Service + Tests)
    - Be shippable on its own without waiting for future tasks
    - Implement features end-to-end rather than layer-by-layer when changes are tightly coupled
    
    Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Follow these principles:
    - Each sub-task should be a small, focused unit of work
    - Sub-tasks within a parent can depend on each other (they're done sequentially)
    - Don't create sub-tasks that depend on future parent tasks
    - Start simple (e.g., "Add meta refresh") before complex (e.g., "Add Turbo Streams")
    - Mark infrastructure tasks as "if needed" when appropriate
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List views first, then controllers, then models/services. List these under the `Relevant Files` section, including corresponding test files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`, where `[prd-file-name]` matches the base name of the input PRD file (e.g., if the input was `prd-user-profile-editing.md`, the output is `tasks-prd-user-profile-editing.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `app/views/feature/page.html.erb` - Brief description (e.g., Main view template for the feature).
- `app/controllers/feature_controller.rb` - Brief description (e.g., Controller handling feature requests).
- `app/models/feature.rb` - Brief description (e.g., Model with business logic).
- `test/controllers/feature_controller_test.rb` - Controller tests.
- `test/models/feature_test.rb` - Model tests.
- `test/system/feature_test.rb` - System/integration tests.

### Notes

- Tasks should follow UI-first development: Start with what users see, then work backwards to infrastructure
- Each parent task must leave the application in a coherent, working state when all its sub-tasks are complete
- **Use Complete Vertical Slice strategy**: Parent tasks should group tightly coupled changes across all layers (UI + Controller + Service + Database + Tests)
- Sub-tasks are small units of work that build toward completing the parent task
- Prefer simple solutions (meta refresh) before complex ones (Turbo Streams)
- Mark speculative infrastructure tasks as "if needed"
- **Anti-pattern**: Don't create parent tasks that only touch one layer if other layers need updating too
- For Rails projects: Tests go in the `test/` directory structure, not alongside source files
- Use `bin/rails test` to run all tests, or `bin/rails test path/to/test_file.rb` for specific tests

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
