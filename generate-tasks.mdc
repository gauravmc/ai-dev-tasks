---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a developer through implementation **following the Skateboard-First Philosophy.**

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file.
2.  **Analyze PRD:** The AI reads the PRD, paying close attention to the phased requirements (**Skateboard, Scooter, etc.**).
3.  **Phase 1: Generate Parent Tasks (The Roadmap from Skateboard to Car):**
    - Based on the PRD analysis, create the main parent tasks.
    - **The first parent task MUST be "Build the Skateboard".**
    - Subsequent parent tasks should be other complete "vehicles" (e.g., "Upgrade to Scooter," "Build the Bicycle").
    - **Parent Task Coherence (The Complete Vehicle Test):** Each parent task must deliver a complete, shippable product (a vertical slice). It is not a component (a horizontal slice). A parent task is never just "Create the UI" or "Build the API endpoint". It is "Build a feature that uses a UI and an API endpoint to deliver value."
    - **Parent Task Checklist (before presenting to user):**
      - [ ] Can a user actually USE this when complete?
      - [ ] Does it work end-to-end (UI → Backend → Database)?
      - [ ] Could you demo this to someone?
      - [ ] Is it shippable (even if simple)?
      - If any answer is "no", it's a wheel, not a skateboard.
    - Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level roadmap, starting with the Skateboard. Ready to generate the sub-tasks for the Skateboard? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down **only the first parent task (the Skateboard)** into the smaller, actionable sub-tasks needed to build it.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List views first, then controllers, then models/services.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the specified filename.

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `app/views/feature/page.html.erb` - Brief description (e.g., Main view template for the feature).
- `app/controllers/feature_controller.rb` - Brief description (e.g., Controller handling feature requests).
- `app/models/feature.rb` - Brief description (e.g., Model with business logic).
- `test/controllers/feature_controller_test.rb` - Controller tests.
- `test/models/feature_test.rb` - Model tests.
- `test/system/feature_test.rb` - System/integration tests.

### Notes

- **This plan follows the Skateboard-First Philosophy.**
- Each parent task (e.g., 1.0) is a complete, shippable "vehicle" (like a Skateboard or Bicycle).
- A parent task is a **Complete Vertical Slice**. It must not be a single component like a "wheel".
- **Anti-pattern**: A parent task that only touches the UI layer without making it functional.
- Sub-tasks are the small, sequential steps to build that vehicle.
- Prefer simple solutions (meta refresh) before complex ones (Turbo Streams).

## Tasks

- [ ] 1.0 Parent Task Title (e.g., Build the Skateboard: Basic Image Generation with Page Refresh)
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title (e.g., Upgrade to Scooter: Enhance with Turbo Streams for a Smoother Experience)
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (e.g., Add a Sidecar: Include Error Handling and Notifications)

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
